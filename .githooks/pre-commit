#!/bin/bash
echo "Running FarmData2 pre-commit checks..."

# Prevent commits to the production branch
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
if [ "$BRANCH" = "production" ]; then
  echo
  echo "You cannot commit directly to the production branch."
  echo "The production branch should only be updated by merging development into it."
  echo "This operation should only be performed by maintainers."
  echo
  exit 255
fi

if [ "$BRANCH" = "development" ]; then
  echo
  echo "You cannot commit directly to the development branch."
  echo "Instead create a feature branch and commit your changes to it."
  echo "Then push your feature branch to GitHub and create a pull request."
  echo
  exit 255
fi

# Function to check if any staged files have been modified
check_modified_staged_files() {
  local modified_files=$(git diff --name-only --cached)
  for file in $modified_files; do
    if [ -f "$file" ] && git diff --quiet "$file"; then
      continue
    else
      return 0  # Found at least one modified staged file
    fi
  done
  return 1  # No modified staged files found
}

# Function to check Cypress test files for .only
check_test_only() {
  local files=$(git diff --cached --name-only --diff-filter=d | grep '\.cy\.js$' || true)
  if [ -n "$files" ]; then
    echo "Checking for .only in Cypress test files..."
    for file in $files; do
      if grep -n "\.only" "$file" > /dev/null; then
        echo "Error: Found .only in $file"
        echo "Please remove .only before committing."
        return 1
      fi
    done
  fi
  return 0
}

# Function to check Cypress test files for console.log
check_console_log() {
  local files=$(git diff --cached --name-only --diff-filter=d | grep '\.cy\.js$' || true)
  if [ -n "$files" ]; then
    echo "Checking for console.log in Cypress test files..."
    for file in $files; do
      if grep -n "console\.log" "$file" > /dev/null; then
        echo "Error: Found console.log in $file"
        echo "Please remove console.log statements before committing."
        return 1
      fi
    done
  fi
  return 0
}

# Function to get component name from file path
get_component_name() {
  local file="$1"
  basename "$file" .vue
}

# Function to find all test files for a component
find_component_tests() {
  local component_name="$1"
  find . -name "${component_name}.*.cy.js"
}

# Function to determine which tests to skip
get_tests_to_skip() {
  local staged_files=$(git diff --cached --name-only --diff-filter=d)
  local tests_to_skip=()
  
  # Check for library file changes
  if echo "$staged_files" | grep -q "^library/.*\.js$\|/lib\.js$"; then
    echo "Library files changed - skipping individual test runs as they'll be covered by library tests"
    tests_to_skip+=("*")
    return
  fi
  
  # Process Vue component changes
  for file in $staged_files; do
    if [[ "$file" =~ \.vue$ ]]; then
      local component_name=$(get_component_name "$file")
      local component_tests=$(find_component_tests "$component_name")
      if [ -n "$component_tests" ]; then
        for test in $component_tests; do
          tests_to_skip+=("$test")
        done
      fi
    fi
  done
  
  echo "${tests_to_skip[@]}"
}

# Function to get list of tests that need to be run
get_tests_to_run() {
  local staged_files=$(git diff --cached --name-only --diff-filter=d)
  local skip_tests=($(get_tests_to_skip))
  local tests_to_run=()
  
  # Process all staged test files
  for file in $staged_files; do
    if [[ "$file" =~ \.cy\.js$ ]]; then
      local skip=false
      for skip_pattern in "${skip_tests[@]}"; do
        if [[ "$file" == $skip_pattern ]] || [[ "$skip_pattern" == "*" ]]; then
          skip=true
          break
        fi
      done
      
      if [ "$skip" = false ]; then
        tests_to_run+=("$file")
      fi
    fi
  done
  
  echo "${tests_to_run[@]}"
}

# Run all checks
if ! check_test_only; then
  exit 255
fi

if ! check_console_log; then
  exit 255
fi

# Get the list of tests to run
TESTS_TO_RUN=$(get_tests_to_run)

# Set environment variable for npm script to use
export CYPRESS_TESTS_TO_RUN="$TESTS_TO_RUN"

# For all other branches, run the pre-commit checks using lint-staged.
if npm run check:staged; then
  # Check if any staged files were modified during the pre-commit checks
  if check_modified_staged_files; then
    echo
    echo "Some staged files were modified during the pre-commit checks."
    read -p "Would you like to stage these changes now? (y/N) " response
    if [[ "$response" =~ ^[Yy] ]]; then
      git add -u
      echo "Changes have been staged. Running pre-commit checks again..."
      if ! npm run check:staged; then
        echo
        echo "FarmData2 pre-commit checks failed after staging new changes."
        echo "The commit will not be made."
        echo "Review the output above for details."
        echo "Fix the issues and try your commit again."
        echo
        exit 255
      fi
    else
      echo "Changes were not staged. Please stage them manually if needed."
    fi
  fi
  echo "Done."
  echo "Making the commit."
  echo
  exit 0
else
  echo
  echo "FarmData2 pre-commit checks failed."
  echo "The commit will not be made."
  echo "Review the output above for details."
  echo "Fix the issues and try your commit again."
  echo
  exit 255
fi
